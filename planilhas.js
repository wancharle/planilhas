// Generated by CoffeeScript 1.10.0
(function() {
  this.planilhas = {};

  if (typeof module === 'object' && module.exports) {
    module.exports = this.planilhas;
  }

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var cellname2colrow, colname2colnum, colnum2colname, colrow2cellname, object2array, s2ab, sheetAccomodateCell, sheetAccomodateRange, splitCellname, writeCell, writeCellByName, writeRange, writeRangeByName;

  object2array = function(obj, keys) {
    return keys.map(function(k) {
      return obj[k];
    });
  };

  s2ab = function(s) {
    var buf, i, l, ref, view;
    buf = new ArrayBuffer(s.length);
    view = new Uint8Array(buf);
    for (i = l = 0, ref = s.length - 1; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
      view[i] = s.charCodeAt(i) & 0xFF;
    }
    return buf;
  };

  this.planilhas.base64toBlob = function(base64data, contentType) {
    return new Blob([s2ab(atob(base64data))], {
      type: contentType
    });
  };

  this.planilhas.json2matrix = function(json) {
    var array, i, keys, l, obj, ref;
    array = [];
    if (json.length > 0) {
      keys = Object.keys(json[0]);
      array.push(keys);
      for (i = l = 0, ref = json.length; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
        obj = object2array(json[i], keys);
        array.push(obj);
      }
    }
    return array;
  };

  colname2colnum = function(name) {
    var base, c, i, j, l, len1, ref, result;
    base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    result = 0;
    j = name.length;
    ref = name.toUpperCase();
    for (i = l = 0, len1 = ref.length; l < len1; i = ++l) {
      c = ref[i];
      j -= 1;
      result += (base.indexOf(c) + 1) * Math.pow(base.length, j);
    }
    return result - 1;
  };

  this.planilhas.colname2colnum = colname2colnum;

  colnum2colname = function(n) {
    var len, ordA, ordZ, s;
    ordA = 'A'.charCodeAt(0);
    ordZ = 'Z'.charCodeAt(0);
    len = ordZ - ordA + 1;
    s = "";
    while (n >= 0) {
      s = String.fromCharCode(n % len + ordA) + s;
      n = Math.floor(n / len) - 1;
    }
    return s;
  };

  this.planilhas.colnum2colname = colnum2colname;

  splitCellname = function(cellname) {
    return cellname.match(/[a-zA-Z]+|[0-9]+/g);
  };

  this.planilhas.splitCellname = splitCellname;

  cellname2colrow = function(cellname) {
    var col, colname, ref, row;
    ref = splitCellname(cellname), colname = ref[0], row = ref[1];
    col = colname2colnum(colname);
    row = row - 1;
    return [col, row];
  };

  this.planilhas.cellname2colrow = cellname2colrow;

  colrow2cellname = function(colrow) {
    var col, colname, row;
    col = colrow[0], row = colrow[1];
    colname = colnum2colname(col);
    return "" + colname + (row + 1);
  };

  this.planilhas.colrow2cellname = colrow2cellname;

  sheetAccomodateCell = function(sheet, col, row) {
    var colsNeeded, data, i, l, m, ref, ref1, rowsNeeded;
    data = sheet.data;
    rowsNeeded = (row + 1) - data.length;
    if (rowsNeeded > 0) {
      for (i = l = 1, ref = rowsNeeded; 1 <= ref ? l <= ref : l >= ref; i = 1 <= ref ? ++l : --l) {
        data.push([]);
      }
    }
    colsNeeded = (col + 1) - data[row].length;
    if (colsNeeded > 0) {
      for (i = m = 1, ref1 = colsNeeded; 1 <= ref1 ? m < ref1 : m > ref1; i = 1 <= ref1 ? ++m : --m) {
        data[row].push(null);
      }
    }
    return sheet.data;
  };

  sheetAccomodateRange = function(sheet, col1, row1, col2, row2) {
    var col, l, ref, ref1, row, rowMax, rowMin;
    rowMax = row1 > row2 ? row1 : row2;
    rowMin = row1 < row2 ? row1 : row2;
    col = col1 > col2 ? col1 : col2;
    for (row = l = ref = rowMin, ref1 = rowMax; ref <= ref1 ? l <= ref1 : l >= ref1; row = ref <= ref1 ? ++l : --l) {
      sheetAccomodateCell(sheet, col, row);
    }
    return sheet.data;
  };

  writeCell = function(sheet, col, row, value, style) {
    sheetAccomodateCell(sheet, col, row);
    if (style) {
      if (value === null) {
        value = sheet.data[row][col];
        if (value && typeof value === 'object') {
          value.metadata.style = style.id;
        } else {
          value = {
            value: value,
            metadata: {
              style: style.id
            }
          };
        }
      } else {
        value = {
          value: value,
          metadata: {
            style: style.id
          }
        };
      }
    }
    sheet.data[row][col] = value;
    return sheet.data;
  };

  this.planilhas.writeCell = writeCell;

  writeCellByName = function(sheet, cellname, value, style) {
    var col, ref, row;
    ref = cellname2colrow(cellname), col = ref[0], row = ref[1];
    return writeCell(sheet, col, row, value, style);
  };

  this.planilhas.writeCellByName = writeCellByName;

  writeRange = function(sheet, col1, row1, col2, row2, value, style) {
    var col, l, m, ref, ref1, ref2, ref3, row;
    for (row = l = ref = row1, ref1 = row2; ref <= ref1 ? l <= ref1 : l >= ref1; row = ref <= ref1 ? ++l : --l) {
      for (col = m = ref2 = col1, ref3 = col2; ref2 <= ref3 ? m <= ref3 : m >= ref3; col = ref2 <= ref3 ? ++m : --m) {
        writeCell(sheet, col, row, value, style);
      }
    }
    return sheet.data;
  };

  this.planilhas.writeRange = writeRange;

  writeRangeByName = function(sheet, rangename, value, style) {
    var cellname1, cellname2, col1, col2, ref, ref1, ref2, row1, row2;
    ref = rangename.split(":"), cellname1 = ref[0], cellname2 = ref[1];
    ref1 = cellname2colrow(cellname1), col1 = ref1[0], row1 = ref1[1];
    ref2 = cellname2colrow(cellname2), col2 = ref2[0], row2 = ref2[1];
    return writeRange(sheet, col1, row1, col2, row2, value, style);
  };

  this.planilhas.writeRangeByName = writeRangeByName;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var ExcelBuilder, Medias, Workbook, buildSheetFromMatrix;

  ExcelBuilder = this.ExcelBuilder;

  buildSheetFromMatrix = this.planilhas.sheet_from_array_of_arrays;

  Medias = (function() {
    function Medias(workbook) {
      this.workbook = workbook;
      this.drawings = new ExcelBuilder.Drawings();
      this.workbook.addDrawings(this.drawings);
    }

    Medias.prototype.addMedia = function(imagedata, filename, callback) {
      var pic, picRef;
      picRef = this.workbook.addMedia('image', filename, imagedata);
      pic = new ExcelBuilder.Drawing.Picture();
      pic.setMedia(picRef);
      this.drawings.addDrawing(pic);
      return callback({
        pic: pic,
        picRef: picRef
      });
    };

    Medias.prototype.addImage = function(url, filename, callback) {
      var self, xhr;
      self = this;
      xhr = new XMLHttpRequest();
      xhr.responseType = 'blob';
      xhr.onload = function() {
        var reader;
        reader = new FileReader();
        reader.onloadend = function() {
          var imagedata;
          imagedata = reader.result.split(',')[1];
          return self.addMedia(imagedata, filename, callback);
        };
        return reader.readAsDataURL(xhr.response);
      };
      xhr.open('GET', url);
      return xhr.send();
    };

    Medias.prototype.drawOn = function(worksheet) {
      return worksheet.addDrawings(this.drawings);
    };

    return Medias;

  })();

  Workbook = (function() {
    function Workbook() {
      this.workbook = ExcelBuilder.Builder.createWorkbook();
      this.sheets = [];
      this.sheetByName = {};
      this.stylesheet = this.workbook.getStyleSheet();
    }

    Workbook.prototype.addSheet = function(data, name) {
      var worksheet;
      name = name || ("Sheet " + (this.sheets.length + 1));
      worksheet = this.workbook.createWorksheet({
        name: name
      });
      worksheet.setData(data);
      this.sheets.push(worksheet);
      this.sheetByName[name] = worksheet;
      return this.workbook.addWorksheet(worksheet);
    };

    Workbook.prototype.save = function(filename) {
      var data;
      if (filename == null) {
        filename = "teste.xlsx";
      }
      data = planilhas.ExcelBuilder.Builder.createFile(this.workbook);
      return data.then((function(_this) {
        return function(dataBase64) {
          return _this.saveBlob(dataBase64, filename);
        };
      })(this));
    };

    Workbook.prototype.saveBlob = function(data, filename) {
      if (filename == null) {
        filename = "test.xlsx";
      }
      return saveAs(planilhas.base64toBlob(data, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"), filename);
    };

    return Workbook;

  })();

  this.planilhas.Medias = Medias;

  this.planilhas.Workbook = Workbook;

  this.planilhas.ExcelBuilder = ExcelBuilder;

  this.planilhas.Positioning = ExcelBuilder.Positioning;

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  this.planilhas = {};

  if (typeof module === 'object' && module.exports) {
    module.exports = this.planilhas;
  }

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var object2array, s2ab;

  object2array = function(obj, keys) {
    return keys.map(function(k) {
      return obj[k];
    });
  };

  s2ab = function(s) {
    var buf, i, j, ref, view;
    buf = new ArrayBuffer(s.length);
    view = new Uint8Array(buf);
    for (i = j = 0, ref = s.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      view[i] = s.charCodeAt(i) & 0xFF;
    }
    return buf;
  };

  this.planilhas.base64toBlob = function(base64data, contentType) {
    return new Blob([s2ab(atob(base64data))], {
      type: contentType
    });
  };

  this.planilhas.json2matrix = function(json) {
    var array, i, j, keys, obj, ref;
    array = [];
    if (json.length > 0) {
      keys = Object.keys(json[0]);
      array.push(keys);
      for (i = j = 0, ref = json.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        obj = object2array(json[i], keys);
        array.push(obj);
      }
    }
    return array;
  };

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var ExcelBuilder, Medias, Workbook, buildSheetFromMatrix;

  ExcelBuilder = this.ExcelBuilder;

  buildSheetFromMatrix = this.planilhas.sheet_from_array_of_arrays;

  Medias = (function() {
    function Medias(workbook) {
      this.workbook = workbook;
      this.drawings = new ExcelBuilder.Drawings();
      this.workbook.addDrawings(this.drawings);
    }

    Medias.prototype.addMedia = function(imagedata, filename, callback) {
      var pic, picRef;
      picRef = this.workbook.addMedia('image', filename, imagedata);
      pic = new ExcelBuilder.Drawing.Picture();
      pic.setMedia(picRef);
      this.drawings.addDrawing(pic);
      return callback({
        pic: pic,
        picRef: picRef
      });
    };

    Medias.prototype.addImage = function(url, filename, callback) {
      var self, xhr;
      self = this;
      xhr = new XMLHttpRequest();
      xhr.responseType = 'blob';
      xhr.onload = function() {
        var reader;
        reader = new FileReader();
        reader.onloadend = function() {
          var imagedata;
          imagedata = reader.result.split(',')[1];
          return self.addMedia(imagedata, filename, callback);
        };
        return reader.readAsDataURL(xhr.response);
      };
      xhr.open('GET', url);
      return xhr.send();
    };

    Medias.prototype.drawOn = function(worksheet) {
      return worksheet.addDrawings(this.drawings);
    };

    return Medias;

  })();

  Workbook = (function() {
    function Workbook() {
      this.workbook = ExcelBuilder.Builder.createWorkbook();
      this.sheets = [];
      this.sheetByName = {};
      this.stylesheet = this.workbook.getStyleSheet();
    }

    Workbook.prototype.addSheet = function(data, name) {
      var worksheet;
      name = name || ("Sheet " + (this.sheets.length + 1));
      worksheet = this.workbook.createWorksheet({
        name: name
      });
      worksheet.setData(data);
      this.sheets.push(worksheet);
      this.sheetByName[name] = worksheet;
      return this.workbook.addWorksheet(worksheet);
    };

    Workbook.prototype.save = function(filename) {
      var data;
      if (filename == null) {
        filename = "teste.xlsx";
      }
      data = planilhas.ExcelBuilder.Builder.createFile(this.workbook);
      return data.then((function(_this) {
        return function(dataBase64) {
          return _this.saveBlob(dataBase64, filename);
        };
      })(this));
    };

    Workbook.prototype.saveBlob = function(data, filename) {
      if (filename == null) {
        filename = "test.xlsx";
      }
      return saveAs(planilhas.base64toBlob(data, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"), filename);
    };

    return Workbook;

  })();

  this.planilhas.Medias = Medias;

  this.planilhas.Workbook = Workbook;

  this.planilhas.ExcelBuilder = ExcelBuilder;

  this.planilhas.Positioning = ExcelBuilder.Positioning;

}).call(this);
